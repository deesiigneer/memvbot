# Test bot of @memvbot - @without_name_bot in telegram


import logging

import config
from database import database
import sys
import time
from config import BOT_TOKEN, BOT_OWNER, CHANNEL_ID

import aiogram.dispatcher
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import State, StatesGroup


# Configure logging
logging.basicConfig(level=logging.INFO)
storage = MemoryStorage()
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot, storage=storage)
count = 1
sql = database.sql


class Answer_bot(StatesGroup):
    reply_text = State()
    reply_id = State()


# defines
def advertising():
    global count
    print(f'1 {count}')
    if count == 5:
        print(f'2 {count}')
        count = 0
        caption = sql.one('SELECT text, url, count, id FROM advertising ORDER BY RANDOM() LIMIT 1')
        sql.commit(f'UPDATE advertising SET count="{caption[2] - 1}" WHERE id="{caption[3]}"')
        caption = f'[{caption[0]}]({caption[1]})'
    else:
        print(f'3 {count}')
        caption = None
    return caption


def answer_404(user_id):
    answer = sql.one('SELECT text, url, count, id FROM advertising ORDER BY RANDOM() LIMIT 1')
    sql.commit(f'UPDATE users SET used="'
               f'{int(sql.one(f"SELECT used FROM users WHERE id == {user_id}")[0]) + 1}'
               f'" WHERE id="{user_id}"')
    sql.commit(f'UPDATE advertising SET count="{int(answer[2]) - 1}" WHERE id="{answer[3]}"')
    answer = f'[{answer[0]}]({answer[1]})'
    return answer


@dp.message_handler(commands=['start'])
async def command_start(message: types.Message):
    try:
        if message.from_user.language_code == 'ru':
            await bot.send_message(message.chat.id,
                                   f'–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}, —è meme voice bot! –Ø –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –º–µ–º–Ω—ã–µ'
                                   f'–≥–æ–ª–æ—Å–æ–≤—ã–µ –≤ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã –∏–ª–∏ –¥–∞–∂–µ –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è!'
                                   f'\n–ö–∞–∫? –£–∑–Ω–∞–π —á–µ—Ä–µ–∑ /help'
                                   f'\n'
                                   f'\n[–ù–æ–≤–æ—Å—Ç–∏ –æ –±–æ—Ç–µ –º–æ–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ç—É—Ç](https://t.me/joinchat/AAAAAEsekoTUW0WjerW8wA)',
                                   parse_mode='Markdown')
        else:
            await bot.send_message(message.chat.id, f'Hello {message.from_user.full_name}, i\`m Meme Voice bot!'
                                                    f'I can send voice with memes in group, channel or private message.'
                                                    f'\nHow? Use /help'
                                                    f'\n'
                                                    f'\n[News about bot you can find here]('
                                                    f'https://t.me/joinchat/AAAAAEsekoTUW0WjerW8wA)',
                                   parse_mode='Markdown')
        if sql.one("SELECT * FROM users WHERE id LIKE '{}';".format(message.from_user.id)) is None:
            sql.commit(
                "INSERT INTO users VALUES('{}','{}','{}','{}','{}','{}','{}','','','','','','','','','','','','',"
                "'','','','','','','','','','','','','','','','','','','','','','','','','','','','','','','',"
                "'','','','','','','')".format(message.from_user.id,
                                               message.from_user.first_name,
                                               time.strftime("%F %T", time.localtime()),
                                               0, None, '', 'default'))
    except Exception as error:
        tb = sys.exc_info()[2]
        print(error,
              '\nat line {}'.format(tb.tb_lineno))


@dp.message_handler(commands=['help'])
async def command_help(message: types.Message):
    try:
        file_id: str = "CgACAgIAAxkBAAIFgGCkDZuiIAYd9OaUb8spBBGZ2XYbAAJ_CgACOvvwS2TKVs16MCByHwQ"
        if message.from_user.language_code == 'ru':
            await bot.send_message(message.chat.id,
                                   '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?'
                                   '\n'
                                   '\n–ù–∞—á–Ω–∏—Ç–µ –ø–∏—Å–∞—Ç—å @memvbot –≤ –ª—é–±–æ–º —á–∞—Ç–µ, –∏ —É –≤–∞—Å –ø–æ—è–≤–∏—Ç—Å—è —Å–ø–∏—Å–æ–∫ —Å –º–µ–º–∞–º–∏. '
                                   '\n–ü—Ä–∏–º–µ—Ä:'
                                   '\n@memvbot –ø—Ä–∏–≤–µ—Ç'
                                   '\n'
                                   '\n_–ü–æ—á–µ–º—É –≤ –ø–æ—è–≤–∏–≤—à–µ–º—Å—è —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –º–µ–º–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –µ—Å—Ç—å –Ω–∞ –∫–∞–Ω–∞–ª–µ!?_'
                                   '\n–í —Ç–µ–ª–µ–≥—Ä–∞–º–∞ –µ—Å—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –Ω–∞ –≤—ã–≤–æ–¥ —Å—Ç—Ä–æ–∫ –≤ inline —Ä–µ–∂–∏–º–µ, –ø–æ—ç—Ç–æ–º—É –∏—Ö '
                                   '—Ç–∞–º –≤—Å–µ–≥–æ 50. –ü–æ —ç—Ç–æ–º—É –±—ã–ª–æ —Ä–µ—à–µ–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥–∏ (—Ç–µ–∫—Å—Ç), –ø–æ –∫–æ—Ç–æ—Ä—ã–º –º–æ–∂–Ω–æ –±—É–¥–µ—Ç '
                                   '–Ω–∞–π—Ç–∏ –º–µ–º. –ù–µ –∑–Ω–∞—é, –∫–∞–∫ –º–æ–∂–Ω–æ –±—ã–ª–æ –µ—â—ë –ø—Ä–æ—â–µ —Å–¥–µ–ª–∞—Ç—å, –Ω–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–¥–µ–∏ –∏–ª–∏ '
                                   '–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ, [–ø–∏—à–∏—Ç–µ —Å—é–¥–∞.](https://t.me/deesiigneer)', parse_mode='Markdown')
            await bot.send_animation(message.chat.id, animation=file_id, caption='–ù–∞–≥–ª—è–¥–Ω—ã–π –ø—Ä–∏–º–µ—Ä')
        else:
            await bot.send_message(message.chat.id,
                                   "How to use the bot? (How to use) "
                                   "\n"
                                   "\nStart writing @memvbot in any chat and you will have a list with memes. "
                                   "\nExample:"
                                   "\n@memvbot hello"
                                   "\n"
                                   "\n_Why are there no memes in the list that are on the channel !? _"
                                   "\nThe telegram has a restriction on the output of lines in inline mode, so their"
                                   "there are only 50. Therefore, it was decided to add tags (text), by which it will "
                                   "be possible find the meme. I don't know how it could have been made even easier,"
                                   " but if there are ideas or suggestion, [write here.](https://t.me/deesiigneer)",
                                   parse_mode='Markdown')
            await bot.send_animation(message.chat.id, animation=file_id, caption='Illustrative example')
    except Exception as error:
        tb = sys.exc_info()[2]
        print(error,
              '\nat line {}'.format(tb.tb_lineno))


@dp.message_handler(commands=['price'])
async def command_price(message: types.Message):
    try:
        if message.from_user.language_code == 'ru':
            await bot.send_message(message.chat.id,
                                   f'–ü—Ä–∏–≤–µ—Ç _{message.from_user.full_name}_, —Ö–æ—á–µ—à—å –∫—É–ø–∏—Ç—å —Ä–µ–∫–ª–∞–º—É?'
                                   f'\n–ü–∏—à–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—é - @deesiigneer '
                                   f'\n'
                                   f'\nüéô–†–µ–∫–ª–∞–º–∞ –≤ –≤–æ–π—Å–∞—Ö –æ—Ç *100* –ø–æ–∫–∞–∑–æ–≤ - *{config.IN_VOICES}‚ÇΩ*'
                                   f'\n_–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ_ *100* _–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - _*{config.ADDITIONAL}‚ÇΩ*'
                                   f'\n_–†–∞–∑–æ–≤–æ–µ –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ_ *1000* _–ø—Ä–æ—Å–º–æ—Ç—Ä–æ–≤ - _*55‚ÇΩ*'
                                   f'\n'
                                   f'\nüë•–†–µ–∫–ª–∞–º–∞ –≤ [–≥—Ä—É–ø–ø–µ](https://t.me/joinchat/Sx6ShNRbRaN6tbzA) - 500‚ÇΩ'
                                   f'\n_–ø—É–±–ª–∏–∫—É–µ—Ç—Å—è –Ω–∞_ *24—á* _—Å –º–æ–º–µ–Ω—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏_'
                                   f'\n'
                                   f'\nüìë*–£–°–õ–û–í–ò–Ø –†–ê–ó–ú–ï–©–ï–ù–ò–Ø:*'
                                   f'\n1Ô∏è‚É£ - –†–µ–∫–ª–∞–º–∞ –≤ *–≤–æ–π—Å–∞—Ö* –ø—Ä–∏–Ω–∏–º–∞–µ—Ç—Å—è –≤ –≤–≤–∏–¥–µ *"—Ç–µ–∫—Å—Ç - —Å—Å—ã–ª–∫–∞"*'
                                   f' –ø—Ä–∏–º–µ—Ä –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–µ –Ω–∏–∂–µ '
                                   f'\n2Ô∏è‚É£ - *–ù–µ –±–æ–ª–µ–µ* _1024_ —Å–∏–º–≤–æ–ª–æ–≤ –≤ —Ç–µ–∫—Å—Ç–µ –¥–ª—è —Ä–µ–∫–ª–∞–º—ã –≤ –≤–æ–π—Å–∞—Ö'
                                   f'\n3Ô∏è‚É£ - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ—Ç —Ä–µ–∫–ª–∞–º—ã –≤ –≤–æ–π—Å–∞—Ö –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ –∏—Å—Ç–µ—á–µ–Ω–∏—é –ø–æ–∫–∞–∑–æ–≤ '
                                   f'–∏–ª–∏ –≤ —Ä–µ–∂–∏–º–µ –æ–Ω–ª–∞–π–Ω –ø–æ –∑–∞–ø—Ä–æ—Å—É (–Ω–æ –Ω–µ —á–∞—â–µ, —á–µ–º –æ–¥–∏–Ω —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏).'
                                   f'/ –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –≥—Ä—É–ø–ø–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç—Å—è –ø–æ –∑–∞–ø—Ä–æ—Å—É '
                                   f'*–ù–ï –†–ê–ù–ï–ï 7 –î–ù–ï–ô* —Å –º–æ–º–µ–Ω—Ç–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏',
                                   parse_mode='Markdown', disable_web_page_preview=True)
        else:
            await bot.send_message(message.chat.id, f'Hi')
    except Exception as error:
        tb = sys.exc_info()[2]
        print(error,
              '\nat line {}'.format(tb.tb_lineno))


# –∞–¥–º–∏–Ω–ø–∞–Ω–µ–ª—å–∫–∞
@dp.message_handler(commands=['admintool'])
async def command_admintool(message: types.Message):
    try:
        if message.from_user.id == BOT_OWNER:
            adminkeyboard = types.InlineKeyboardMarkup(row_width=2)
            statistics = types.InlineKeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
            sql_database = types.InlineKeyboardButton(text="–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö", callback_data="sql_database")
            adminkeyboard.add(statistics, sql_database)
            await bot.send_message(BOT_OWNER, f'–í—ã–±–µ—Ä–∏ —á—Ç–æ –∂–µ–ª–∞–µ—à—å, {message.from_user.full_name}',
                                   reply_markup=adminkeyboard)
    except Exception as error:
        tb = sys.exc_info()[2]
        print(error,
              '\nat line {}'.format(tb.tb_lineno))


@dp.inline_handler()
async def chosen_handler(query: types.InlineQuery):
    try:
        global count
        print(query)
        if sql.one("SELECT * FROM memevoices WHERE tag LIKE '%{}%'".format(query.query)) is None:
            not_found = types.InlineQueryResultArticle(id='404',
                                                       title="404",
                                                       description="–¢–∞–∫–æ–≥–æ –≤–æ–π—Å–∞ –Ω–µ—Ç...",
                                                       thumb_url=f"https://cdn.frankerfacez.com/emoticon/454732/2",
                                                       thumb_width=120,
                                                       thumb_height=120,
                                                       input_message_content=types.InputTextMessageContent(
                                                           message_text=answer_404(query.from_user.id),
                                                           parse_mode='Markdown',
                                                           disable_web_page_preview=True)
                                                       )
            await bot.answer_inline_query(query.id, [not_found], cache_time=0)
        else:
            sql_ = list(sql.many("SELECT * FROM memevoices WHERE tag LIKE '%{}%'".format(query.query), 50))
            cap = advertising()
            results = [types.InlineQueryResultCachedVoice(id=item[0], voice_file_id=item[1], title=item[2],
                                                          caption=cap, parse_mode='Markdown')
                       for item in sql_
                       ]
            await query.answer(results, cache_time=0, is_personal=True)
            count = count + 1
    except Exception as error:
        tb = sys.exc_info()[2]
        print(error,
              '\nat line {}'.format(tb.tb_lineno))


@dp.chosen_inline_handler()
async def chosen(result: types.ChosenInlineResult):
    print(f'result {result}')


@dp.message_handler(content_types=types.ContentType.VOICE)
async def add_audio(message: types.Message):
    try:
        if message.from_user.id == BOT_OWNER:
            if message.voice.file_id != sql.one(
                    f"SELECT audio_file_id FROM memevoices WHERE audio_file_id = '{message.voice.file_id}'"):
                if message.caption is not None:
                    sql.commit(
                        f"INSERT INTO memevoices VALUES(Null, '{message.voice.file_id}', '{message.caption}', '0')")
                    await bot.send_voice(chat_id=CHANNEL_ID, voice=message.voice.file_id,
                                         caption=f"<code>{message.caption}</code>", parse_mode='HTML')
                    await message.reply(text="–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!")
                else:
                    await message.reply(text="–í–æ–π—Å –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º!\n–ü–æ–ø—Ä–æ–±—É–π –µ—â—ë —Ä–∞–∑.")
            else:
                await message.reply(text="–≠—Ç–æ—Ç –≤–æ–π—Å —É–∂–µ –µ—Å—Ç—å –≤ –ë–î!")
    except Exception as error:
        tb = sys.exc_info()[2]
        print(error, '\nat line {}'.format(tb.tb_lineno))


@dp.message_handler(content_types=types.ContentType.ANY)
async def big_eye(message: types.Message):
    try:
        for m in message:
            print(str(m))
        if message.from_user.id == BOT_OWNER:
            keyboard = types.InlineKeyboardMarkup(row_width=2)
            answerbybot = types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å —á–µ—Ä–µ–∑ –±–æ—Ç–∞", callback_data="answerbybot")
            keyboard.add(answerbybot)
            primary = str(f'Details:'
                          f'\n ‚îî Message ID: {message.message_id}'
                          f'\n\tFrom:'
                          f'\n ‚îú <a href="tg://user?id={message.from_user.id}">{message.from_user.id}</a>'
                          f'\n ‚îú is bot: {message.from_user.is_bot}'
                          f'\n ‚îú Fullname: {message.from_user.first_name}'
                          f'\n ‚îú Lastname: {message.from_user.last_name}'
                          f'\n ‚îú Username: {message.from_user.username}'
                          f'\n ‚îî Language code: {message.from_user.language_code}'
                          f'\n\tChat:'
                          f'\n ‚îú <a href="tg://user?id={message.chat.id}">{message.chat.id}</a>'
                          f'\n ‚îú type: {message.chat.type}'
                          f'\n ‚îú title: {message.chat.title}'
                          f'\n ‚îú username: {message.chat.username}'
                          f'\n ‚îú First name: {message.chat.first_name}'
                          f'\n ‚îú Last name: {message.chat.last_name}'
                          f'\n ‚îî Date: {message.date}'
                          )
            if message.is_forward():
                if message.forward_from_chat is None:
                    if message.forward_from is None:
                        primary = primary + str(f'\n\tForward from:'
                                                f'\n ‚îú ID: <code>unknown</code></a>'
                                                f'\n ‚îú First name: {message.forward_sender_name}'
                                                f'\n ‚îî Forward date: {message.forward_date}')
                    primary = primary + str(f'\n\tForward from:'
                                            f'\n ‚îú ID: <a href="tg://user?id={message.forward_from.id}">'
                                            f'{message.forward_from.id}</a>'
                                            f'\n ‚îú First name: {message.forward_from.first_name}'
                                            f'\n ‚îú Is bot: {message.forward_from.is_bot}'
                                            f'\n ‚îú Last name: {message.forward_from.last_name}'
                                            f'\n ‚îú Username: {message.forward_from.username}'
                                            f'\n ‚îú Language code: {message.forward_from.language_code}'
                                            f'\n ‚îî Forward date: {message.forward_date}')
                elif message.forward_from_chat is not None:
                    primary = primary + str(f'\n\tForward from chat:'
                                            f'\n ‚îú ID: <code>{message.forward_from_chat.id}</code>'
                                            f'\n ‚îú Title: {message.forward_from_chat.title}'
                                            f'\n ‚îú Username: {message.forward_from_chat.username}'
                                            f'\n ‚îú Type: {message.forward_from_chat.type}'
                                            f'\n ‚îú Forward from message id: {message.forward_from_message_id}'
                                            f'\n ‚îî Forward date: {message.forward_date}'
                                            )
                # if message.entities is not None: # TODO: —Å–¥–µ–ª–∞—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Å—Å—ã–ª–∫–∏
                #     print(f'message.entities: {message.entities}')
                #     global entitie
                #     for entities in message.entities:
                #         entitie = entities
                #         print(f'Entit: {entitie}')
                #     primary = primary + str(f'\nEntities'
                #                             f'\n ‚îú Type: {entitie.type}'
                #                             f'\n ‚îú Offset: {entitie.offset}'
                #                             f'\n ‚îú Length: {entitie.length}'
                #                             )
                # if entitie.type == 'text_link':
                #     primary = primary + str(f'\n ‚îî Url: {entitie.url}')
                # elif entitie.type == 'text_mention':
                #     primary = primary + str(f'\nEntities'
                #                             f'\n ‚îî User: {entitie.user}')
            if message.caption is not None:
                primary = primary + str(f'\n ‚îî Caption: {message.caption}')
            if message.text is not None:
                primary = primary + str(f'\n ‚îî Text: {message.text}')
                await bot.send_message(BOT_OWNER, primary, parse_mode='HTML', reply_markup=keyboard)
            if message.content_type == 'audio':
                await bot.send_audio(BOT_OWNER, message.audio.file_id, caption=primary, parse_mode='HTML',
                                     reply_markup=keyboard)
            if message.content_type == 'document':
                await bot.send_document(BOT_OWNER, message.document.file_id, caption=primary, parse_mode='HTML',
                                        reply_markup=keyboard)
            if message.content_type == 'photo':
                await bot.send_photo(BOT_OWNER, message.photo[-1].file_id, caption=primary, parse_mode='HTML',
                                     reply_markup=keyboard)
            if message.content_type == 'sticker':
                await bot.send_message(BOT_OWNER, primary, parse_mode='HTML')
                await bot.send_sticker(BOT_OWNER, message.sticker.file_id, reply_markup=keyboard,
                                       reply_to_message_id=message.message_id + 1)
            if message.content_type == 'video':
                await bot.send_video(BOT_OWNER, message.video.file_id, parse_mode='HTML', caption=primary,
                                     reply_markup=keyboard)
            if message.content_type == 'animation':
                print(f'animation type is = {type(message.animation.file_id)}')
                await bot.send_animation(BOT_OWNER, message.animation.file_id, caption=primary, parse_mode='HTML',
                                         reply_markup=keyboard)
            if message.content_type == 'voice':
                if message.from_user.id != BOT_OWNER:
                    await bot.send_voice(BOT_OWNER, message.voice.file_id, caption=primary, parse_mode='HTML',
                                         reply_markup=keyboard)
            if message.content_type == 'video_note':
                await bot.send_message(BOT_OWNER, primary, parse_mode='HTML')
                await bot.send_video_note(BOT_OWNER, message.video_note.file_id, reply_markup=keyboard,
                                          reply_to_message_id=message.message_id + 1)
            # elif types.message.ContentType.GAME:
            #     await bot.send_game()
            # elif types.message.ContentType.NEW_CHAT_MEMBERS:
            #     await bot.send_audio(BOT_OWNER, message.audio)
            # elif types.message.ContentType.LEFT_CHAT_MEMBER:
            #     await bot.send_audio(BOT_OWNER, message.audio)
            # elif types.message.ContentType.INVOICE:
            #     await bot.send_audio(BOT_OWNER, message.audio)
            # elif types.message.ContentType.SUCCESSFUL_PAYMENT:
            #     await bot.send_audio(BOT_OWNER, message.audio)
            # elif types.message.ContentType.UNKNOWN:
            #     await bot.send_audio(BOT_OWNER, message.audio)
    except Exception as error:
        tb = sys.exc_info()[2]
        print(error, '\nat line {}'.format(tb.tb_lineno))


@dp.callback_query_handler(text="answerbybot")
async def detailed(call: types.CallbackQuery, state: aiogram.dispatcher.FSMContext):
    reply_user_id = int()
    for entity in call.message.entities:
        reply_user_id = entity.user.id
    await Answer_bot.reply_text.set()
    await state.update_data(reply_id=int(reply_user_id))
    await bot.send_message(call.message.chat.id, '–ñ–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...')


@dp.message_handler(state=Answer_bot.reply_text)
async def answer_by_bot(message: types.Message, state: aiogram.dispatcher.FSMContext):
    async with state.proxy() as data:
        data['reply_text'] = message.text
    await bot.send_message(chat_id=data['reply_id'], text=data['reply_text'])
    await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=False)
